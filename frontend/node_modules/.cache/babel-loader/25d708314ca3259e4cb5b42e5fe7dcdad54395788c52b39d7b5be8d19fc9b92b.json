{"ast":null,"code":"var _jsxFileName = \"/workspaces/ArchitectureView/frontend/src/components/chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatInterface() {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [result, setResult] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const backendUrl = process.env.REACT_APP_BACKEND_URL;\n\n  // Handle text input change\n  const handleTextChange = e => {\n    setInputText(e.target.value);\n  };\n\n  // Handle chat submission and stream the response\n  const handleSubmit = async () => {\n    if (inputText.trim()) {\n      setIsLoading(true);\n      setResult(''); // Clear previous result\n\n      try {\n        const response = await fetch(`${backendUrl}/record/chat`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            content: inputText\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n        let done = false;\n        let accumulatedResult = '';\n        while (!done) {\n          const {\n            value,\n            done: readerDone\n          } = await reader.read();\n          done = readerDone;\n          if (value) {\n            const chunk = decoder.decode(value, {\n              stream: true\n            });\n            const lines = chunk.split('\\n');\n            lines.forEach(line => {\n              if (line.startsWith('data:')) {\n                const data = line.replace('data: ', '').trim();\n\n                // Check for the end of the stream\n                if (data === '[DONE]') {\n                  setIsLoading(false);\n                  return;\n                }\n                try {\n                  // Parse JSON if it's not \"[DONE]\"\n                  const parsedData = JSON.parse(data);\n                  if (parsedData.response) {\n                    accumulatedResult += parsedData.response;\n                    setResult(accumulatedResult);\n                  }\n                } catch (err) {\n                  console.error('Error parsing JSON chunk:', err);\n                }\n              }\n            });\n          }\n        }\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error during streaming:', error);\n        setIsLoading(false);\n        setResult('An error occurred. Please try again.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat with Gemma 2:2b\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: inputText,\n        onChange: handleTextChange,\n        placeholder: \"Type your message here...\",\n        rows: \"5\",\n        cols: \"50\",\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      disabled: isLoading,\n      children: isLoading ? 'Waiting for response...' : 'Send'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Response:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        style: {\n          whiteSpace: 'pre-wrap',\n          wordWrap: 'break-word'\n        },\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatInterface, \"bploMJiLnpwVy7H9LD5Jp6ohlQk=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatInterface","_s","inputText","setInputText","result","setResult","isLoading","setIsLoading","backendUrl","process","env","REACT_APP_BACKEND_URL","handleTextChange","e","target","value","handleSubmit","trim","response","fetch","method","headers","body","JSON","stringify","content","ok","Error","reader","getReader","decoder","TextDecoder","done","accumulatedResult","readerDone","read","chunk","decode","stream","lines","split","forEach","line","startsWith","data","replace","parsedData","parse","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","rows","cols","disabled","onClick","style","whiteSpace","wordWrap","_c","$RefreshReg$"],"sources":["/workspaces/ArchitectureView/frontend/src/components/chat.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction ChatInterface() {\n  const [inputText, setInputText] = useState('');\n  const [result, setResult] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const backendUrl = process.env.REACT_APP_BACKEND_URL;\n\n  // Handle text input change\n  const handleTextChange = (e) => {\n    setInputText(e.target.value);\n  };\n\n  // Handle chat submission and stream the response\n  const handleSubmit = async () => {\n    if (inputText.trim()) {\n      setIsLoading(true);\n      setResult(''); // Clear previous result\n\n      try {\n        const response = await fetch(`${backendUrl}/record/chat`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ content: inputText }),\n        });\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n\n        let done = false;\n        let accumulatedResult = '';\n\n        while (!done) {\n          const { value, done: readerDone } = await reader.read();\n          done = readerDone;\n\n          if (value) {\n            const chunk = decoder.decode(value, { stream: true });\n            const lines = chunk.split('\\n');\n\n            lines.forEach((line) => {\n              if (line.startsWith('data:')) {\n                const data = line.replace('data: ', '').trim();\n\n                // Check for the end of the stream\n                if (data === '[DONE]') {\n                  setIsLoading(false);\n                  return;\n                }\n\n                try {\n                  // Parse JSON if it's not \"[DONE]\"\n                  const parsedData = JSON.parse(data);\n                  if (parsedData.response) {\n                    accumulatedResult += parsedData.response;\n                    setResult(accumulatedResult);\n                  }\n                } catch (err) {\n                  console.error('Error parsing JSON chunk:', err);\n                }\n              }\n            });\n          }\n        }\n\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error during streaming:', error);\n        setIsLoading(false);\n        setResult('An error occurred. Please try again.');\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>Chat with Gemma 2:2b</h1>\n\n      <div>\n        <textarea\n          value={inputText}\n          onChange={handleTextChange}\n          placeholder=\"Type your message here...\"\n          rows=\"5\"\n          cols=\"50\"\n          disabled={isLoading}\n        />\n      </div>\n\n      <button onClick={handleSubmit} disabled={isLoading}>\n        {isLoading ? 'Waiting for response...' : 'Send'}\n      </button>\n\n      <div>\n        <h2>Response:</h2>\n        <pre style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word' }}>{result}</pre>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}